@startuml
'https://plantuml.com/class-diagram
package AlgoHoot {

class AlgoHoot {
    - instancia: AlgoHoot
    - maximoPreguntas: int
    - puntajeMaximo: int
    - AlgoHoot()
    + {static}getInstancia(): AlgoHoot
    + {static}reiniciarInstancia(): void
    + setPuntajeMaximo(int): void
    + setMaximoPreguntas(int):void
    + inicializarGestorDePreguntas():void
    + comenzarNuevaRondaDePreguntas(): void
    + jugarRondaDePreguntas(j:Jugador ,modsInd:List<ModificadorIndividual>,\nmodsGlob:List<ModificadorGlobal>, respuestas:List<Respuesta>): void
    + terminarRondaDePreguntas(): void
    + obtenerPreguntaActual(): Pregunta
    + agregarJugador(jugador:Jugador):void
    + obtenerJugadores(): TablaDeJugadores
    + reiniciarListaDeJugadores(): void
    + juegoFinalizado(): bool
    + obtenerGanador(): Jugador
    + obtenerMaximoPreguntas(): int
    + obtenerPuntosParaGanar(): int
}

class RondaDePreguntas {
    - pregunta: Pregunta
    - puntajes:List<PuntajeParcial>
    - modificadoresGlobales: List<ModificadorGlobal>
    + RondaDePreguntas(pregunta:Pregunta)
    + jugar(j:Jugador,modsInd:List<ModificadorIndividual>,\nmodsGlob:List<ModificadorGlobal>, respuestas: List<Respuesta>): void
    + terminar(): void
    + getPregunta(): Pregunta
}

class GestorDePreguntas {
    - contador: int
    - preguntas: List<Pregunta>
    + GestorPreguntas()
    + obtenerSiguientePregunta(): Pregunta
    - mezclarPreguntas(preguntas:List<Pregunta>): void
    - insertarEnLaLista(listaNormal:List<Pregunta>,\n listaDeNoAgregados:List<Pregunta>): List<Pregunta>
}

class Jugador {
    - nombre: str
    - puntosTotales: PuntajeTotal
    - duplicador: ModificadorIndividual
    - triplicador: ModificadorIndividual
    - anulador: ModificadorGlobal
    - exclusividad: ModificadorGlobal
    + Jugador(nombre:String)
    + gastar(mod:ModificadorIndividual): void
    + gastar(mod:ModificadorGlobal): void
    + obtenerPuntaje(): int
    + sumarPuntos(puntos:PuntajeParcial):void
    + equals(jugador:Jugador): bool
    + tieneNombre(n:String): bool
    + porCadaPoderClasico(o:OperacionPoderesClasicos): void
    + porCadaPoderPenalidad(o:OperacionPoderesPenalidad):void
    + hacerConNombreYPuntaje(o:OperacionNombrePuntaje):void
}



class TablaDeJugadores {
    - obtenerJugadorConMayorPuntaje(): Jugador
    + obtenerGanador(): Jugador
}

interface OperacionPoderesClasicos {
    + operar(anulador: ModificadorGlobal,\n            exclusividad: ModificadorGlobal): void
}
interface OperacionNombrePuntaje {
    + operar(nombre: String, puntos: int): void
}
interface OperacionPoderesPenalidad {
    + operar(anulador: ModificadorGlobal,\n            duplicador: ModificadorIndividual,\n            triplicador: ModificadorIndividual)
}



AlgoHoot --> "*" RondaDePreguntas
AlgoHoot -down->"1" GestorDePreguntas

TablaDeJugadores .left.> AlgoHoot
AlgoHoot -right->"1   " TablaDeJugadores

TablaDeJugadores -right-> "*" Jugador


Jugador ..> OperacionNombrePuntaje
Jugador .up.> OperacionPoderesClasicos
Jugador .up.> OperacionPoderesPenalidad

@enduml