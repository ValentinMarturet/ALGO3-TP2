@startuml clasesGenerales

skinparam monochrome true
hide circle
skinparam classAttributeIconSize 0

Abstract Pregunta {
    - pregunta: str
    - tematica: str
    - opciones: List<str>
    + Pregunta(pregunta:str,tematica:str)
    + {abstract} mostrarPanel()
    + {abstract} validarSeleccion(seleccion:List<int>): int
}

class GestorDeTurnos {
    + iniciarJuego()
}

class Turno {
    - pregunta: Pregunta
    - anulador: Anulador
    - exclusividad: Exclusividad
    + Turno(pregunta:Pregunta)
    + jugarTurno(listaJugadores:List<Jugador>):void
}

class GestorPreguntas {
    +GestorPreguntas(preguntas:List<Pregunta>)
    +obtenerSiguientePregunta(): Pregunta
}

class Jugador {
    - nombre: str
    - puntajeTotal: int
    + Jugador(nombre:str):void
    + obtenerJugada(): Jugada
    + obtenerPuntaje(): int
    + sumarPuntaje(puntaje:int):void
}

class Respuesta {
    - puntajeBase: int
    - modificadores: Modificador
    + Respuesta(p: Puntaje, m: Modificador, j: Jugador)
    + actualizarPuntajeDelJugador(): void
}

class AlgoHoot {
    - GUI: Gui
    + manejarInputsConsola()
}

Jugador "*" <- GestorDeTurnos
GestorDeTurnos -down-> GestorPreguntas
GestorDeTurnos -down-> "*" Turno
GestorPreguntas *-->"*" Pregunta
Turno --> Pregunta
Turno --> "*" Respuesta
Respuesta --> Jugador
AlgoHoot --> GestorDeTurnos

@enduml