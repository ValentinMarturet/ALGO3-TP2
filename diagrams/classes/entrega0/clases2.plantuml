@startuml clasesGenerales

skinparam monochrome false
/'skinparam monochrome true'/
/'hide circle '/
skinparam classAttributeIconSize 0

interface Pregunta {
    + getPregunta(): String
    + getOpciones(): List<Opcion>
    + responder(respuestas:List<Respuesta>): PuntajeParcial
    + getTematica(): String
    + getTextoRespuesta(): String
}

class GestorDeTurnos {
    +comenzarNuevoTurno():void
    +obtenerPreguntaTurnoActual(): Pregunta
    +jugarTurnoActual(j:Jugador ,mi:ModificadorIndividual, mg:ModificadorGlobal ,respuestas:List<Respuesta>): void
    +terminarTurnoActual(): void
}

class Turno {
    - puntajes:List<PuntajeParcial>
    + Turno(pregunta:Pregunta)
    + jugar(j:Jugador,modInd:ModificadorIndividual ,modGlob:ModificadorGlobal,respuestas: List<Respuesta>): void
    + terminar(): void
}

class GestorPreguntas {
    +GestorPreguntas(preguntas:List<Pregunta>)
    +obtenerSiguientePregunta(): Pregunta
}

class Jugador {
    - nombre: str
    - puntosTotales: PuntajeTotal
    + Jugador(nombre:String):void
    + gastar(mod:ModificadorIndividual):void
    + obtenerPuntaje(): int
    + sumarPuntos(puntaje:int):void
    + equals(jugador:Jugador): bool
}

class Respuesta {
    - respuesta:String
    + Respuesta(respuesta:String)
    + equals(opcion:String) : bool
}

class AlgoHoot {
    - instancia: AlgoHoot
    + {static}getInstancia(): AlgoHoot
    + comenzarNuevoTurno(): void
    + jugarTurno(j:Jugador ,mi:ModificadorIndividual, mg:ModificadorGlobal ,respuestas:List<Respuesta>): void
    + terminarTurno(): void
    + obtenerPreguntaActual(): Pregunta
    + agregarJugador(jugador:Jugador):void
    + obtenerJugadores(): List<Jugador>
}

class Lector{
    +cargarPreguntas(): List<Pregunta>
}

interface ModificadorIndividual{
    + {abstract} modificar(unPuntaje:int): int
}

interface ModificadorGlobal{
    +aplicar(puntajes:List<PuntajeParcial>): void
}

class PuntajeParcial{
    -puntajeBase:int
    +PuntajeParcial()
    +PuntajeParcial(puntajeInicial:int)
    +sumar(otroPuntaje:PuntajeParcial):void
    +establecerJugador(jugador:Jugador):void
    +agregarModificador(mod:ModificadorIndividual):void
    +obtenerPuntos():int
    +equals(puntaje:Object):
    +perteneceA(j:Jugador):bool
    +actualizarPuntajeDelJugador():void
}


GestorDeTurnos -down-> GestorPreguntas
GestorDeTurnos -down-> "*" Turno
GestorPreguntas o-->"*" Pregunta
GestorPreguntas ..> Lector
Turno --> Pregunta
Turno --> "*" Respuesta
AlgoHoot --> GestorDeTurnos
GestorDeTurnos -left->"*" Jugador
PuntajeParcial --> Jugador
Respuesta ..> PuntajeParcial

Jugador --> "2" ModificadorIndividual
Turno -->"*" ModificadorGlobal

@enduml
